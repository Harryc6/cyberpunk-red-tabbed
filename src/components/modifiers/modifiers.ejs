<div class="section-modifiers">
  <div class="modifiers">
    <input type="hidden" name="attr_finalmodifier" />
    <h4 class="clipped-corner">
      Modifiers
      <span name="attr_finalmodifierdisplay"></span>
      <button type="action" name="act_resetmodifiers">Reset</button>
    </h4>
    <div class="modifiers-body">
      Show Modifiers?
      <input type="checkbox" name="attr_hidemodifiers" class="show-next-div" />
      <div class="toggle-container">
        <div class="columns">
          <div class="column">
            <input type="checkbox" name="attr_damageserious" />
            Damage: Serious
            <small>(HP&lt;<span name="attr_seriouslywounded"></span>)</small>
          </div>
          <div class="column">
            <input type="checkbox" name="attr_damagemortal" />
            Damage: Mortal
            <small>(HP&lt;1)</small>
          </div>
          <div class="column">
            <input type="checkbox" name="attr_understress" /> Under stress
          </div>
          <div class="column">
            <input type="checkbox" name="attr_neverdonebefore" /> Never done
            before
          </div>
        </div>
        <div class="columns">
          <div class="column">
            <input type="checkbox" name="attr_nightorlowlight" /> Night or low
            light
          </div>
          <div class="column">
            <input type="checkbox" name="attr_obscured" /> Obscured by smoke or
            darkness
          </div>
          <div class="column">
            <input type="checkbox" name="attr_complextask" /> Complex task
          </div>
          <div class="column">
            <input type="checkbox" name="attr_wrongtoolsorparts" /> Wrong tools
            or parts
          </div>
        </div>
        <div class="columns">
          <div class="column">
            <input type="checkbox" name="attr_drunkdrugged" /> Drunk or Drugged
          </div>
          <div class="column">
            <input type="checkbox" name="attr_secretly" /> Attempting secretly
          </div>
          <div class="column">
            <input type="checkbox" name="attr_lostfacedown" /> Lost facedown
          </div>
          <div class="column">
            <input type="checkbox" name="attr_aimedshot" /> Aimed shot
          </div>
        </div>
        <div class="columns">
          <div class="column">
            <input type="checkbox" name="attr_complimentaryskill" />
            Complimentary skill
          </div>
          <div class="column">
            <input type="checkbox" name="attr_extratime" /> Spend extra time
          </div>
          <div class="column">
            Other/custom
            <input type="number" name="attr_custommod" />
          </div>
          <div class="column">
            Luck points spent
            <select name="attr_luckmod">
              <option value="0">0</option>
              <option value="1">1</option>
              <option value="2">2</option>
              <option value="3">3</option>
              <option value="4">4</option>
              <option value="5">5</option>
              <option value="6">6</option>
              <option value="7">7</option>
              <option value="8">8</option>
              <option value="9">9</option>
              <option value="10">10</option>
            </select>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<script type="text/worker">
  /**
   * Convert from Roll20's handling of checkbox values to
   * Boolean values for control flows.
   */
  function getCheckboxAsBoolean(val) {
    // Additional logic to handle the custommod and luckmod fields
    if (Number(val) && Number(val) !== 0) {
      return true;
    }
    return val === 'on' ? true : false;
  }
  /**
   * A list of modifiers that we can iterate through with a
   * name that matches an ATTR value stored by the sheet and
   * the actual numerical modifier to be applied to die rolls.
   */
  function modifiersList() {
    return [
      { name: 'nightorlowlight', value: -1 },
      { name: 'neverdonebefore', value: -1 },
      { name: 'complextask', value: -2 },
      { name: 'wrongtoolsorparts', value: -2 },
      { name: 'understress', value: -2 },
      { name: 'drunkdrugged', value: -4 },
      { name: 'secretly', value: -4 },
      { name: 'obscured', value: -4 },
      { name: 'damageserious', value: -2 },
      { name: 'damagemortal', value: -4 },
      { name: 'lostfacedown', value: -2 },
      { name: 'complimentaryskill', value: 1 },
      { name: 'extratime', value: 1 },
      { name: 'aimedshot', value: -8 },
      { name: 'luckmod', value: 'luckmod' },
      { name: 'custommod', value: 'custommod' }
    ];
  }
  /**
   * Get modifiers as an array of names as Strings.
   */
  function getModifierNames() {
    var modifiers = modifiersList();
    var modifierNames = [];
    modifiers.forEach((modifier) => {
      modifierNames.push(modifier.name);
    });
    return modifierNames;
  }
  /**
   * Given the namme of a modifier return the numerical modifier
   * to be applied to die rolls.
   */
  function getModifierValueByName(name) {
    // LUCK and CUSTOM are special cases that map directly
    // to attr values stored in the sheet.
    if (name === 'luckmod' || name === 'custommod') {
      getAttrs([name], function (values) {
        return values[name];
      });
    }
    // MOST MODIFIERS are static numbers that have their values
    // stored as part of the data structure in modifiersList().
    var modifiers = modifiersList();
    return modifiers.find((modifier) => modifier.name === name).value;
  }
  /**
   * Calculate the final modifier...
   */
  function calculateFinalModifier() {
    var calculatedFinalModifier = 0;
    getAttrs(getModifierNames(), function (values) {
      for (var [key, value] of Object.entries(values)) {
        if (getCheckboxAsBoolean(value)) {
          if (key === 'luckmod' || key === 'custommod') {
            calculatedFinalModifier += Number(values[key]);
          } else {
            calculatedFinalModifier += Number(getModifierValueByName(key));
          }
        }
      }
      if (calculatedFinalModifier === 0) {
        calculatedFinalModifier = '0';
      }
      setAttrs({
        finalmodifier: calculatedFinalModifier
      });
    });
  }
  // Get the (formatted) list of modifier fields to monitor for changes
  function eventsModifiers() {
    var modifiers = getModifierNames();
    var modifiersList = '';
    modifiers.forEach((modifier) => {
      modifiersList += 'change:' + modifier + ' ';
    });
    return modifiersList;
  }
  /**
   * When a modifier checkbox changes, trigger the re-calculation of
   * the finalmodifier.
   */
  on(eventsModifiers(), function () {
    calculateFinalModifier();
  });
  /**
   * When the finalmodifier changes re-write the display version of
   * the calculated modifier
   */
  on('change:finalmodifier', function () {
    getAttrs(['finalmodifier', 'finalmodifierdisplay'], function (values) {
      var modifier = Number(values.finalmodifier);
      var formattedmodifier = ' ';
      if (modifier > 0) {
        formattedmodifier = '(+' + modifier + ')';
      }
      if (modifier < 0) {
        formattedmodifier = '(' + modifier + ')';
      }
      setAttrs({
        finalmodifierdisplay: formattedmodifier
      });
    });
  });
  /**
   * Single function to reset all modifiers
   */
  function resetAllModifiers() {
    var modifiers = getModifierNames();
    var attrsToSet = {};
    getAttrs(modifiers, function (values) {
      for (var [key, value] of Object.entries(values)) {
        attrsToSet[key] = '0';
      }
      setAttrs(attrsToSet);
    });
  }
  /**
   * Event handler to trigger reset of all modifiers
   */
  on('clicked:resetmodifiers', function () {
    resetAllModifiers();
  });
</script>
